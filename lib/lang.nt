
# List related #

#
# A list struct
# Implemented in linked-list data structure.
#
(struct list (head tail))

(def list.listOrNull? (fn (lst) (or (list? lst) (null? lst))))

(con list (any list.listOrNull? -> list?))

(def list._make (fn (tup i)
    (if (<= (+ i 1) (tuple.length tup))
        (list (tuple.get tup i) (list._make tup (+ i 1)))
        null)))

(def list.make (fn (tup)
    (list._make tup 0)))

(con list.make (tuple? -> list.listOrNull?))

(def list.get (fn (lst index)
    (if (== index 0)
        (list.head lst)
        (list.get (list.tail lst) (- index 1)))))

(con list.get (list? int? -> any))

(def list.length (fn (lst)
    (if (null? lst)
        0
        (+ (list.length (list.tail lst)) 1))))

(con list.length (list.listOrNull? -> int?))

(def list._reverse (fn (front tail)
    (if (null? front)
        tail
        (list._reverse (list.tail front) (list (list.head front) tail)))))

(def list.reverse (fn (lst)
    (list._reverse lst null)))

(con list.reverse (list.listOrNull? -> list.listOrNull?))


# Functions #

(def map (fn (ftn lst)
    (if (null? lst)
        null
        (list (ftn (list.head lst)) (map ftn (list.tail lst))))))

## (def apply2 (fn (ftn lst)
    (if (null? lst)
        )))

