
# List related #

#
# A list struct
# Implemented in linked-list data structure.
#
(struct list (head tail))

(def list?? (fn (lst) (or (list? lst) (null? lst))))

(con list (any list?? -> list??))

(def list._make_ele (fn (ele)
    (if (tuple? ele)
        (list._make ele 0)
        ele)))

(def list._make (fn (tup i)
    (if (<= (+ i 1) (tuple.length tup))
        (list (list._make_ele (tuple.get tup i)) (list._make tup (+ i 1)))
        null)))

(def list.make (fn (tup)
    (list._make tup 0)))

(con list.make (any -> list??))

(def list.get (fn (lst index)
    (if (== index 0)
        (list.head lst)
        (list.get (list.tail lst) (- index 1)))))

(con list.get (list? int? -> any))

(def list.length (fn (lst)
    (if (null? lst)
        0
        (+ (list.length (list.tail lst)) 1))))

(con list.length (list?? -> int?))

(def list._reverse (fn (front tail)
    (if (null? front)
        tail
        (list._reverse (list.tail front) (list (list.head front) tail)))))

(def list.reverse (fn (lst)
    (list._reverse lst null)))

(con list.reverse (list?? -> list??))

(def list.str (fn (lst)
    (if (null? lst)
        "|"
        (+ (+ "[" (+ (+ (str (list.head lst)) "->") (list.str (list.tail lst)))) "]"))))


(def list._heads (fn (lists)
    (if (null? lists)
        null
        (list (list.head (list.head lists)) (list._heads (list.tail lists))))))

(def list._tails (fn (lists)
    (if (null? lists)
        null
        (list (list.tail (list.head lists)) (list._tails (list.tail lists))))))


# Functions #

(def map (fn (ftn lst)
    (if (null? lst)
        null
        (list (ftn (list.head lst)) (map ftn (list.tail lst))))))

(con map (fn? list?? -> list??))

(def foldl (fn (ftn init lst)
    (if (null? lst)
        init
        (foldl ftn (ftn (list.head lst) init) (list.tail lst)))))

(con foldl ((fn (x) (or (fn? x) (struct? x))) any list?? -> any))

